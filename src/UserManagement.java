/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
import java.sql.*;
import javax.swing.JOptionPane;
import Project.ConnectionProvider;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.DriverManager;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author cragl
 */
public class UserManagement extends javax.swing.JFrame {

    /**
     * Creates new form editViewUser
     */
    public UserManagement() {
        initComponents();
        fetchUsers();
    }
    
    private void updateUser(String studentID, String fullName, String email, String role) {
    String sql = "UPDATE user SET fullname = ?, email = ?, role = ? WHERE studentID = ?";

    Connection con = null;
    PreparedStatement pst = null;
    try {
        con = ConnectionProvider.getCon();
        con.setAutoCommit(false); // Ensure the connection is not in auto-commit mode.
        pst = con.prepareStatement(sql);

        pst.setString(1, fullName);
        pst.setString(2, email);
        pst.setString(3, role);
        pst.setString(4, studentID);

        int affectedRows = pst.executeUpdate();
        if (affectedRows > 0) {
            con.commit(); // Commit the transaction.
            JOptionPane.showMessageDialog(null, "User updated successfully");
        } else {
            JOptionPane.showMessageDialog(null, "No changes were made. User not found with ID: " + studentID);
        }
    } catch (SQLException e) {
        if (con != null) {
            try {
                con.rollback(); // Rollback in case of error.
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
        JOptionPane.showMessageDialog(null, "Error updating user: " + e.getMessage());
        e.printStackTrace();
    } finally {
        // Clean up and close the resources.
        if (pst != null) {
            try {
                pst.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        if (con != null) {
            try {
                con.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
}



    
    private void fetchUsers() {
        DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
        model.setRowCount(0);

        try (Connection con = ConnectionProvider.getCon()) {
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery("SELECT * FROM user");
            
            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getString("fullname"),
                    rs.getString("studentID"),
                    rs.getString("email"),
                    rs.getString("role")
                    // Добавьте другие поля при необходимости
                });
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jToggleButton1 = new javax.swing.JToggleButton();
        jToggleButton2 = new javax.swing.JToggleButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Full Name", "Student ID", "E-mail", "Role"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jToggleButton1.setText("Save Changes");
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        jToggleButton2.setText("Cancel");
        jToggleButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton2ActionPerformed(evt);
            }
        });

        jButton1.setText("Delete User");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 552, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(105, 105, 105)
                        .addComponent(jToggleButton1)
                        .addGap(91, 91, 91)
                        .addComponent(jButton1)
                        .addGap(105, 105, 105)
                        .addComponent(jToggleButton2)))
                .addContainerGap(86, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jToggleButton1)
                    .addComponent(jToggleButton2)
                    .addComponent(jButton1))
                .addGap(35, 35, 35))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            String fullName = model.getValueAt(i, 0).toString();
            String studentID = model.getValueAt(i, 1).toString();
            String email = model.getValueAt(i, 2).toString();
            String role = model.getValueAt(i, 3).toString();
            updateUser(studentID, fullName, email, role);
    }
    fetchUsers(); // Refresh table data
    JOptionPane.showMessageDialog(this, "Changes saved successfully!");
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void jToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton2ActionPerformed
        // TODO add your handling code here:
        setVisible(false);
        new home().setVisible(true);
    }//GEN-LAST:event_jToggleButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        // Получаем выбранную строку
    int selectedRow = jTable1.getSelectedRow();
    
    // Проверяем, что строка была выбрана
    if (selectedRow >= 0) {
        // Получаем ID студента из выбранной строки
        String studentID = jTable1.getValueAt(selectedRow, 1).toString();
        
        // Подтверждение удаления от пользователя
        int a = JOptionPane.showConfirmDialog(null, "Do you really want to delete this user?", "Select", JOptionPane.YES_NO_OPTION);
        if(a == 0) {
            try {
                Connection con = ConnectionProvider.getCon();
                Statement st = con.createStatement();
                
                // Запрос на удаление пользователя из БД
                st.executeUpdate("DELETE FROM user WHERE studentID='" + studentID + "'");
                JOptionPane.showMessageDialog(null, "User successfully deleted");
                
                // Обновляем таблицу для отображения изменений
                fetchUsers();
                
            } catch(SQLException e) {
                JOptionPane.showMessageDialog(null, "User cannot be deleted");
                e.printStackTrace();
            }
        }
    } else {
        // Если строка не была выбрана, выводим сообщение
        JOptionPane.showMessageDialog(null, "Please select a user to delete");
    }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserManagement().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToggleButton jToggleButton2;
    // End of variables declaration//GEN-END:variables
}
